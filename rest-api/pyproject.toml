[build-system]
requires = [ "setuptools>=46.1.0", "wheel", "build", "docutils" ]

[tool.isort]
profile = "black"

# from m import a, b -> from m import a; from m import b (on separate lines)
# this is the same idea as putting list items or function arguments on separate lines
# with commas at the end. It avoids merge conflicts in git. Some say it's easier to read,
# although it does take up more vertical space, which some also say makes files harder
# to read.
force_single_line_imports = true


# use autoflake with pyproject.toml with
# 'autoflake --config pyproject.toml --in-place --remove-all-unused-imports --recursive .'
#
# note: autoflake won't let you set 'autoflake --config=path/to/pyproject.toml' https://github.com/PyCQA/autoflake/issues/193
# right this moment. It supports setup.cfg, but I'd like to get rid of that entirely.
# 
# Note: I don't really want to set this up for VS Code because I don't want imports to be
# removed every time I "save". That gets annoying when you're just about to use an import.
# Instead, constraining the 'autoflake' command to pre-commit is enough.
#
# Note: there's not an easy way to have .pre-commit-config.yaml be located in a different
# folder than pyproject.toml and still execute 'autoflake' as inside the folder with
# pyproject.toml. This means, (a) for a single-package repo, pyproject.toml + pre-commit works out of the box.
# but (b) for a mono-repo/multi-package repo, these configurations would be better to place as CLI arguments
# directly inside of the pyproject.toml.
#
# This was my attempt at the above ^^^:
# - id: autoflake
#     # At the moment, 'autoflake --config=some/toml/file' does not work. It *can* pick up pyproject.toml
#     # if it's in the same directory as the command is executed from, so for now, we cd into the folder
#     # with the pyproject.toml. For our mono-repos, each pyproject file should have identical tool.* configs
#     # so any pyproject.toml will do.
#     # I used the workaround suggested by asotille here: https://github.com/pre-commit/pre-commit/issues/1110#issuecomment-518939116
#     entry: bash -c 'cd ./rest-api/ && autoflake "$@"' --
#     language: system
[tool.autoflake]
# make changes to files instead of printing diffs
# in_place = true
# remove all unused imports (not just those from the standard library)
remove_all_unused_imports = false
# remove unused variables
remove_unused_variable = [ "all" ]
# exclude __init__.py when removing unused imports
ignore_init_module_imports = true

[tool.black]
# When you use type annotations, your lines start to get long
# black sets it to 88 and recommends "90-ish". Feel free to set it to your liking.
# But try not to let it cause "holy wars". Leaving things to defaults is often good.
# The main goal is usually consistency--not forcing everyone to do things your way.
line-length = 120

###################
# --- Flake 8 --- #
###################

# 'pip install Flake8-pyproject'
# adds a '--toml-config TOML_COMFIG' argument to the flake8 command,
# so 'flake8 --toml-config path/to/pyproject.toml' works :), even in .vscode/settings.json!

# there's a somewhat heated issue in GitHub about flake8 supporting pyproject.toml:
# https://github.com/PyCQA/flake8/issues/234#issuecomment-1206730688

# a lovely person took it upon themselves to write this plugin so flake8 could support pyproject.toml :)

# note: comments like "# noqa: D413,D417 no need for this because of ..." will disable multiple flake8 warnings

#################
# --- Radon --- #
#################

# docs on the flake8-radon plugin: https://radon.readthedocs.io/en/latest/flake8.html
# docs on how radon calculates cyclomatic complexity: https://radon.readthedocs.io/en/latest/intro.html

# 'pip install radon' actually includes a flake8 plugin, there's no 'flake8-radon'

# note: 'radon cc --show-complexity <file.py>' will show the "grade" (A, B, C, D, E) of each
# function in a file, AND it shows the exact cyclomatic complexity score as calculated in
# the radon docs above ^^^. That helps you understand how far you have to go in refactoring.

# note: the CC is actually shown in the flake8 message in the parenthesis. So
# flake8 shows you the --show-complexity output.

######################
# --- Pydocstyle --- #
######################

# 'pip install flake8-docstrings'
# docs: https://pypi.org/project/flake8-docstrings/

# adds a '--docstring-convention google|numpy|pep257|all' argument to flake8

[tool.flake8] 
# radon
radon-max-cc = 10
# this doesn't seem to do anything
docstring-convention = "all"
ignore = [
    ######################
    # --- Pydocstyle --- #
    ######################
    # requires docstring in __init__, often this is trivial
    "D107",
    # Multi-line docstring summary should start at the first line
    "D212",

    ############################
    # --- Flake8 (vanilla) --- #
    ############################
    # line too long; black catches this
    "E501",
    # line break before binary operator; black causes violations of this
    "W503",
    # invalid escape sequence in string such as '\[' with rich; pylint catches this
    "W605",
    # (radon) function, class, module, etc. Example message: "<x> is too complex (<some numerical cc score>)"
    # "R701"
]

##################
# --- Pylint --- #
##################

# pylint
# Confirmed: this works with VS Code.
# supported file docs: https://pylint.readthedocs.io/en/latest/user_guide/usage/run.html
# generate the entire file with 'pylint --generate-toml-config > pylint.toml'

# comments like "# pylint: disable=invalid-name; this is an exception because ..." will disable a single pylint warning
[tool.pylint."messages control"]
# docs on "messages control" https://pylint.readthedocs.io/en/latest/user_guide/messages/message_control.html
disable = [
    # taken care of by black
    "line-too-long",
    # we have a pre-commit hook that strips trailing whitespace
    "trailing-whitespace",
    # pydocstyle catches this
    "missing-function-docstring",
    # infrastructure/containers/postgres/automatic-backup/backup_or_restore.py
    # currently runs on python 3.5.3 which does not support f-strings
    "consider-using-f-string",
    # pylint is currently executed by the pre-commit framework which
    # installs pylint in an isolated virtual environment--this means that
    # pylint cannot "see" any 3rd party libraries imported by code in rootski.
    # TODO - once we move away from "darker", execute pylint as a "local pre-commit hook"
    # so that it runs in the same environment as the rest of our code.
    "import-error",
    # most hand-written CDK classes (constructs/stacks) have no public methods
    "too-few-public-methods",
    # pytest fixtures rely on this pattern
    "redefined-outer-name",
]

